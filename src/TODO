Development Roadmap

Looking at the ESI Spec, taking the Alliance as an example, there are 4 APIs. My approach wrapped the other /alliances endpoints such as in Contacts under Alliance to make it more logical.
This means I need to check manually 1:1 to make sure all endpoints are there and that they are either logically mapping to the ESI or logically placed in a structure that I recognise. This is
important because of the Client / Builder relationship so my thinking is to match the ESI spec identically and not mix up locations. This might lead to a custom builder that could pull all the /character
or / alliance or /corp and make a holistic Builder/Client for that combination. This might lead to a structural refactor and have Builders and Clients matching the ESI and a Logical grouping of Builders/Clients then as a custom option




API Verb
Not all passing in GET using the defaults in apirequesthandler which isn't clean. Handled this now but need to recheck the , undefined paramater and make sure its the right way instead of using JSON.stringify(object)

Models:
Need to review the request models particularly for issues and handle that gracefully


Caching:
See can I / should I consider caching here

Rate Limiting:
For some pages we will get rate limited, we might want to check the number of pages and decide to only request X every minute

Pagination II
General pagination is in place, I wonder can we request a specific page

URL Tidy up:
Construction of the URL to bring in different data sources, right now we don't add that to the URL but we should if it is present in the conf file

Integration with Mock ESI data:
Currently using a mix of my own mocks and real data. ESI Mock is a project, need to look to see can I bind against that

Thourough Testing:
Gaining ESI scopes is slowing me down, I need to revisit this with real requests to look at how it handles. Concerned about any API verb that's not a GET, this might require some refactoring as no
doubt the return logic handling on things like PUT, POST and DELETE require something beyond what I have in place.





Testing Summary:
- All client tests now follow consistent patterns and best practices
- Fixed missing imports (fetchMock, getBody) across all test files
- Improved error handling and edge case testing
- Added comprehensive data structure validation
- Tests now use proper client architecture instead of direct API testing